@use "sass:map"; // Required for map.has-key() and map.get()

//// Maps ////

$breakpoints: ( // Creates variables to be used in my map. 
    s    : 480px,
    m    : 768px,
    l    : 992px,
    xl   : 1260px
);

$colour-map: ( // Creates variables to be used in my map.
    hdr-search-bar   : #555,
    hdr-btn-lines    : #FFF,
    nav-txt          : #FFF,
    nav-icon-hv      : #FFF,
    banner-txt       : #FFF,
    banner-btn-hvr   : #E80A42,
    os-btn-txt       : #FFF,
    os-hov-effect    : #FFF,
    os-icon          : #FFF,
    wt-txt-color     : #fff,
    wt-btn-bg-1      : #272936,
    wt-btn-bg-hv-1   : #121318,
    wt-btn-bg-2      : #4387F6,
    wt-btn-bg-hv-2   : #166AF4,
    wt-btn-bg-3      : #00B67B,
    wt-btn-bg-hv-3   : #009B69,
    client           : #A3A8AC,
    star             : #FFA500,
    ln-title-color   : #333645,
    ln-btn-txt-color : #FFF,
    ln-p-color       : #666,
    footer-txt-color : #FFF,
    main-txt-color   : #333645,
    background-1     : #333645,
    background-2     : #323544,
    background-3     : #212330,
    software         : #67809F,
    software-2       : #F7B322,
    it               : #4183D7,
    digital          : #2ECC71,
    telecoms         : #D64541,
    web              : #926FB1,
    security         : #F62459,
    training         : #CE4125,
    facebook         : #3B5998,
    linkedin         : #0077B5,
    x                : #00ACED,
    instagram        : #D93175
);

//// mixins ////

@mixin mq($size) { // I’m creating a mixin named queries, and it will take one input value. I’m calling that input $size.
    @if map.has-key($breakpoints, $size) { // Checks if the provided $size exists as a key in the $breakpoints map.
        $breakpoint-value: map.get($breakpoints, $size); // If the key exists, retrieve the pixel value associated with that key.
        @media (min-width: $breakpoint-value) { // Start a media query using the retrieved breakpoint value.
        @content; // The @content directive allows me to inject CSS where this mixin is used.
        }
    } @else {
        @warn "No value found for breakpoint '#{$size}'."; // Else output of warning.
    }
}

@mixin color($colour, $property: background-color) { // I’m creating a mixin named colour which takes two input values. $colour will look up the colour in my mpas, $property sets which CSS property I want to apply the colour to.
  $colour-value: map.get($colour-map, $colour); // Tries to find the colour value that matches the $colour in the $colour-map.
                                                // If a match is found, it returns the hex value.
  @if $colour-value { // If a colour was found in the map
    #{$property}: $colour-value; // Output a CSS property using the colour.
  } @else {
    @warn "Category "#{$colour}" not found in $category-colors map."; // Else output of warning.
  }
}